import pandas
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
import pandas
import math
from keras.models import Sequential
from keras.layers.core import Dense, Activation, Dropout
from keras.layers import LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV
from math import sqrt, log, exp
import statistics

county = 'New York City, New York'

a = [126835.0234375, 131589.21875, 135702.0, 139581.984375, 142431.421875, 144683.78125, 147349.578125, 150125.890625, 153613.8125, 158035.765625, 162457.90625, 165443.609375, 167555.609375, 169302.421875, 171661.328125]

b = [113078.1484375, 116421.3671875, 118811.828125, 121271.2578125, 126382.9609375, 129482.2734375, 132137.890625, 134623.09375, 136436.484375, 137862.9375, 139544.1875, 141287.15625, 143465.046875, 146209.296875, 148935.859375]

#results
#-29.90
#834.96
#1437.13

'''

New York City, New York
[107030.9921875, 111909.4140625, 115438.9296875, 119105.65625, 126835.0234375, 131589.21875, 135702.0, 139581.984375, 142431.421875, 144683.78125, 147349.578125, 150125.890625, 153613.8125, 158035.765625, 162457.90625, 165443.609375, 167555.609375, 169302.421875, 171661.328125]

[113078.1484375, 116421.3671875, 118811.828125, 121271.2578125, 126382.9609375, 129482.2734375, 132137.890625, 134623.09375, 136436.484375, 137862.9375, 139544.1875, 141287.15625, 143465.046875, 146209.296875, 148935.859375]

-29.90
834.96
1437.13

Cook, Illinois
[15381.583984375, 16470.65625, 17286.568359375, 18055.89453125, 18935.263671875, 19625.591796875, 20762.765625, 21625.77734375, 22371.1796875, 23068.849609375, 23967.998046875, 25089.373046875, 26114.400390625, 27554.515625, 28687.146484375, 29861.662109375, 30916.21484375, 32046.126953125, 33113.80859375]

[16956.755859375, 17872.21484375, 18550.205078125, 19183.708984375, 19901.34765625, 20460.123046875, 21372.16796875, 22057.734375, 22645.498046875, 23192.09765625, 23891.748046875, 24757.1015625, 25541.3515625, 26632.908203125, 27483.392578125]

16.81
151.58
253.80


Fulton, Georgia
[1511.188720703125, 1543.498291015625, 1634.0767822265625, 1771.978759765625, 1791.6253662109375, 1842.6773681640625, 1898.4520263671875, 1914.9276123046875, 1946.2686767578125, 1994.311767578125, 1999.6802978515625, 2024.67724609375, 2117.436279296875, 2148.9814453125, 2169.82861328125, 2170.79248046875, 2234.4775390625, 2256.0634765625, 2275.557373046875]

[1593.1856689453125, 1608.72119140625, 1650.7808837890625, 1710.98828125, 1719.2244873046875, 1740.250732421875, 1762.63525390625, 1769.1343994140625, 1781.3614501953125, 1799.7659912109375, 1801.7987060546875, 1811.1949462890625, 1845.1776123046875, 1856.432373046875, 1863.789306640625]

0.46
12.23
26.96

King, Washington
[4612.666015625, 4760.18212890625, 4760.18212890625, 4869.8095703125, 4932.70361328125, 5000.6005859375, 5179.783203125, 5179.783203125, 5414.0849609375, 5414.0849609375, 5515.39306640625, 5588.1630859375, 5716.71337890625, 5804.2734375, 5888.8251953125, 5990.94677734375, 6058.0810546875, 6103.7568359375, 6186.57177734375]

[5038.3291015625, 5167.85986328125, 5167.85986328125, 5263.6572265625, 5318.4462890625, 5377.4609375, 5532.52783203125, 5532.52783203125, 5733.90478515625, 5733.90478515625, 5820.49560546875, 5882.5322265625, 5991.78076171875, 6065.93896484375, 6137.3720703125]

-2.78
29.13
85.69


Los Angeles, California
[9191.6337890625, 9541.859375, 9959.986328125, 10423.73828125, 10770.2158203125, 11014.3388671875, 11402.5234375, 11833.5947265625, 12051.576171875, 13026.9775390625, 13858.7216796875, 14632.5078125, 15259.70703125, 15821.232421875, 16141.1005859375, 16373.7216796875, 16824.2109375, 17119.85546875, 17867.205078125]

[11228.0625, 11512.13671875, 11845.767578125, 12209.18359375, 12476.419921875, 12662.60546875, 12955.275390625, 13275.5341796875, 13435.685546875, 14138.3896484375, 14720.931640625, 15250.3955078125, 15671.35546875, 16042.41796875, 16251.4375]

-7.20
194.90
327.69

New York City, New York Deaths
[11234.8115234375, 11795.890625, 12347.0234375, 12821.732421875, 13201.9736328125, 13571.765625, 13885.580078125, 14203.033203125, 14501.2333984375, 14788.208984375, 15022.9970703125, 15238.89453125, 15426.3623046875, 15446.6796875, 16030.8857421875, 16125.3291015625, 16268.54296875, 16369.662109375, 16606.146484375]

[13063.294921875, 13440.927734375, 13803.7138671875, 14110.1416015625, 14351.783203125, 14583.73046875, 14778.2978515625, 14973.0751953125, 15154.2529296875, 15327.005859375, 15467.244140625, 15595.314453125, 15705.8896484375, 15717.8330078125, 16058.3994140625]

2.60
12.31
130.59

Cook, Illinois Deaths
[527.308837890625, 551.7074584960938, 596.8147583007812, 622.0986328125, 659.9625244140625, 721.6829833984375, 745.8453369140625, 806.1573486328125, 815.9749145507812, 837.4979858398438, 884.7156982421875, 920.8009033203125, 955.3463134765625, 992.1803588867188, 1013.5933227539062, 1034.016845703125, 1048.7880859375, 1094.8134765625, 1118.4627685546875]

[594.8084716796875, 607.8590087890625, 630.9094848632812, 643.2738647460938, 661.1173706054688, 688.6527099609375, 698.9625244140625, 723.6702270507812, 727.56396484375, 735.9815673828125, 753.9130859375, 767.1567993164062, 779.4912719726562, 792.297607421875, 799.5869750976562]

-0.72
22.82
18.38

Fulton, Georgia Deaths
[58.00346755981445, 58.00346755981445, 59.96553039550781, 67.55467224121094, 69.38993072509766, 70.29866790771484, 79.07415771484375, 79.92194366455078, 80.76455688476562, 84.90211486816406, 86.52294158935547, 88.91897583007812, 91.27393341064453, 93.58916473388672, 93.58916473388672, 95.86589813232422, 102.47740173339844, 106.0168685913086, 110.82302856445312]

[83.54117584228516, 83.54117584228516, 86.44668579101562, 97.7676010131836, 100.52364349365234, 101.89067077636719, 115.1705322265625, 116.46057891845703, 117.74382781982422, 124.0611801147461, 126.5429916381836, 130.21856689453125, 133.8389892578125, 137.4053497314453, 137.4053497314453]

0.24
-2.42
4.83

King, Washington Deaths
[305.6108093261719, 313.1292419433594, 313.1292419433594, 316.87091064453125, 323.3908386230469, 331.7222900390625, 349.12481689453125, 349.12481689453125, 362.6897888183594, 362.6897888183594, 375.2154235839844, 386.7328796386719, 397.26885986328125, 404.2430725097656, 410.3131408691406, 417.21453857421875, 424.07684326171875, 435.1477355957031, 442.7549743652344]

[357.2579345703125, 364.78900146484375, 364.78900146484375, 368.52911376953125, 375.03375244140625, 383.3235168457031, 400.5625305175781, 400.5625305175781, 413.9334411621094, 413.9334411621094, 426.2312316894531, 437.50079345703125, 447.7792663574219, 454.56793212890625, 460.4667053222656]

-0.39
3.71
6.99

Los Angeles, California Deaths
[281.55810546875, 300.7749328613281, 337.8957824707031, 361.9773864746094, 388.2437438964844, 416.0457763671875, 435.8558044433594, 471.64215087890625, 481.7556457519531, 489.5391845703125, 506.86614990234375, 532.2807006835938, 554.5195922851562, 571.5906372070312, 585.4177856445312, 591.6768188476562, 599.8409423828125, 616.1392211914062, 630.6266479492188]

[335.8570861816406, 346.24676513671875, 364.27691650390625, 374.6883850097656, 385.0163269042969, 394.8879089355469, 401.313232421875, 411.7558288574219, 414.4549255371094, 416.46099853515625, 420.7127380371094, 426.444580078125, 431.0012512207031, 434.2286376953125, 436.6798400878906]

-0.13
10.98
7.98
'''

y = []
x = []

for i in range(len(a)):
    y.append(a[i]-b[i])
    x.append(i)

del_y = []
del_x = []

for i in range(len(y)-1):
    del_y.append(y[i+1]-y[i])
    del_x.append(i)

#plt.show()
    

m, c = np.polyfit(del_x, del_y, 1)

y_fit = []

for i in del_x:
    y_fit.append(m*i+c)

plt.ylim(5*min(del_y),5*max(del_y))

plt.xlabel("Date")
plt.ylabel("Rate of COVID-19 Deaths")
plt.title(county)
plt.plot(del_x, y_fit,'r')
plt.scatter(del_x, del_y)

dates=['A18','A19','A20','A21','A22','A23','A24','A25','A26','A27','A28','A29','A30','MA1']
plt.xticks(np.arange(len(dates)), dates)

plt.gca().legend(('best_fit','LSTM_rate'))
plt.savefig(county+"_mitigation.png",bbox_inches='tight')

del_y=np.array(del_y)
y_fit=np.array(y_fit)
print('%.2f'%m)
print('%.2f'%c)
print('%.2f'%np.sqrt(np.mean((del_y - y_fit) ** 2)))
